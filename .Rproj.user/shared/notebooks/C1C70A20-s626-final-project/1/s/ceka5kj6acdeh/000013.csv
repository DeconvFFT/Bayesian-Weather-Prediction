"0","# log marginal code referenced from course material on bayesian linear regression"
"0","log.marginal.y <- function(y, x, g = length(y), nu0){"
"0","  n <- length(y)"
"0","  p <- ncol(x)"
"0","  if (p == 0) {"
"0","    sigma20 <- mean(y^2)"
"0","    SSRg <- t(y) %*% y"
"0","  } else{"
"0","    tmp_lm <- lm(y~x + 0)"
"0","    sigma20 <- summary(tmp_lm)$sigma^2"
"0","    SSRg <- t(y) %*% y - g/(g+1) * t(y) %*% predict(tmp_lm)"
"0","  }"
"0","  res <- -0.5723649429247 * n + #the magic number is log(pi)/2"
"0","    lgamma(0.5*(nu0 + n)) -lgamma(0.5*nu0) +"
"0","     0.5 * ( -p * log( 1 + g ) +"
"0","              nu0 * log( nu0 * sigma20) +"
"0","              -(nu0 + n) * log(nu0 * sigma20 + SSRg)"
"0","     )"
"0","  return(res)"
"0","}"
"0",""
"0","z <- as.matrix(expand.grid(0:1, 0:1, 0:1, 0:1,0:1,0:1))"
"0","dimnames(z) <- list(NULL, c('Intercept', 'temperature','humidity','visibility','wind_speed','wind_degrees'))"
"0","cols <- apply(z, MARGIN = 1, FUN = function(x)which(x == 1))"
"0",""
"0","lp <- numeric()"
"0","for (i in 1:64){"
"0","  xz <- as.matrix(X[, cols[[i]] ], nrow = length(y))"
"0","  lp[i] <- log.marginal.y(y=y, x=xz, nu0 = 1)"
"0","  "
"0","}"
"0","probs <- exp(lp) /sum(exp(lp))"
"0","cbind(z,lp, probs) %>% View()"
"0","#Posterior mode of the model posterior:"
"0","z[which(probs == max(probs)), ]"
"1","   Intercept "
"1"," temperature "
"1","    humidity "
"1","  visibility "
"1","  wind_speed "
"1","wind_degrees "
"1","
"
"1","           1 "
"1","           1 "
"1","           1 "
"1","           0 "
"1","           1 "
"1","           0 "
"1","
"
